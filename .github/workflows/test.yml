name: test

on:
  pull_request:

  push:
    branches:
      - main

  workflow_call:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: unit test [python-${{ matrix.python-version }}, ${{ matrix.mpi }}]
    runs-on: ubuntu-latest
    env:
      MPIEXEC_TIMEOUT: 300
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        mpi: ["nompi", "mpich", "openmpi"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup MPI
        if: ${{ matrix.mpi != 'nompi' }}
        uses: mpi4py/setup-mpi@v1
        with:
          mpi: ${{ matrix.mpi }}
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install test dependencies
        run: |
          pip install -r tests/requirements.txt
      - name: Install
        run: |
          pip install .
      - name: Test
        run: |
          python -m unittest discover -v -s ./tests -p "test_*.py"
      - name: Install mpi4py
        if: ${{ matrix.mpi != 'nompi' }}
        run: |
          pip install --no-cache-dir mpi4py
      - name: Test MPI
        if: ${{ matrix.mpi != 'nompi' }}
        run: |
          mpiexec -n 2 python -m unittest discover -v -s ./tests -p "test_*.py"

  test-hoomd:
    name: unit test [python-${{ matrix.python-version }}, hoomd-${{ matrix.hoomd-version }}]
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        hoomd-version: ["2.9.7", "3.11.0"]
        exclude:
          - python-version: "3.11"
            hoomd-version: "2.9.7"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Python ${{ matrix.python-version }}
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: latest
          python-version: ${{ matrix.python-version }}
      - name: Install test dependencies
        run: |
          conda install -c conda-forge hoomd=${{ matrix.hoomd-version }}
          pip install -r tests/requirements.txt
      - name: Install
        run: |
          pip install .
      - name: Test
        run: |
          python -m unittest -v tests/simulate/test_hoomd.py

  test-lammps:
    name: unit test [python-${{ matrix.python-version }}, lammps-${{ matrix.lammps-version }}, ${{ matrix.mpi }}]
    needs: test
    runs-on: ubuntu-latest
    env:
      MPIEXEC_TIMEOUT: 300
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        lammps-version: ["2022.06.23", "2023.08.02"]
        mpi: ["mpich", "openmpi"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Python ${{ matrix.python-version }}
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: latest
          python-version: ${{ matrix.python-version }}
      - name: Install test dependencies
        run: |
          conda install -c conda-forge "lammps=${{ matrix.lammps-version }}=*${{ matrix.mpi }}*" mpi4py
          pip install -r tests/requirements.txt
      - name: Install
        run: |
          pip install .
      - name: Test
        run: |
          python -m unittest -v tests/simulate/test_lammps.py
      - name: Test executable
        run: |
          python tests/simulate/test_lammps.py -v --lammps lmp_serial
      - name: Test MPI
        run: |
          mpiexec -n 2 python -m unittest -v tests/simulate/test_lammps.py
      - name: Test MPI executable
        run: |
          python tests/simulate/test_lammps.py -v --lammps "mpiexec -n 2 lmp_mpi"

  test-examples:
    name: test examples
    needs: [test, test-hoomd]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Python 3.8
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: latest
          python-version: 3.8
      - name: Install test dependencies
        run: |
          conda install -c conda-forge hoomd=3
          pip install -r doc/requirements.txt
      - name: Install
        run: |
          pip install .
      - name: Run notebooks
        run: |
          for nb in doc/source/guide/examples/*/*.ipynb
          do
            jupyter nbconvert \
              --ExecutePreprocessor.timeout=120 \
              --to notebook \
              --execute $nb
          done

  # final exit point for unit tests on PRs, which can be a required check
  test-exit:
    name: unit test
    needs: [test, test-hoomd, test-lammps, test-examples]
    if: ${{ always() && github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check core tests
        if: needs.test.result != 'success'
        run: echo "::error ::core tests failed." && exit 1
      - name: Check hoomd tests
        if: needs.test-hoomd.result != 'success'
        run: echo "::error ::hoomd tests failed." && exit 1
      - name: Check lammps tests
        if: needs.test-lammps.result != 'success'
        run: echo "::error ::lammps tests failed." && exit 1
